const y="https://nomanssky.fandom.com/api.php",l=e=>{const s=new URLSearchParams;return Object.entries(e).forEach((([e,a])=>{s.append(e,a.toString())})),`${y}?${s.toString()}`},u={format:"json",origin:"*"},d=(e,s,a)=>{const i={...u,action:"cargoquery",tables:"Bases",fields:["Name","CensusPlayer","CensusReddit","CensusDiscord","CensusFriend","System","Platform","Mode","CensusArrival","CensusRenewal","Builderlink"].join(","),where:`CensusShow IS NOT NULL AND Civilized='${e}'${a?` AND CensusRenewal HOLDS ${a}`:""}`,order_by:"CensusRenewal DESC",group_by:"CensusPlayer",limit:500,offset:s};return l(i)},g=async e=>{try{const s=await fetch(e);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const a=await s.text(),i=C(a);return JSON.parse(i)}catch(e){throw console.error("API call failed:",e),e}},C=e=>e.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#039;/g,"'").replace(/&amp;/g,"&"),f=e=>e.cargoquery.map((({title:e})=>({Name:e.Name,_pageName:e._pageName||e.Name,CensusPlayer:e.CensusPlayer||"Desconocido",System:e.System||"Desconocido",Platform:e.Platform||"Desconocida",Mode:e.Mode||"Desconocido",CensusArrival:e.CensusArrival||"Desconocido",CensusRenewal:e.CensusRenewal||"Desconocido",Builderlink:e.Builderlink,CensusReddit:e.CensusReddit,CensusDiscord:e.CensusDiscord,CensusFriend:e.CensusFriend,CensusVerified:e.CensusVerified}))),q=async(e,s,a)=>{const i=d(e,s,a),r=await g(i);if(null==r||!r.cargoquery)throw new Error("Invalid API response structure");return f(r)},w=async e=>{var s,a;const i={...u,action:"parse",page:e,prop:"wikitext"},r=l(i),t=await g(r),o=((null==(a=null==(s=null==t?void 0:t.parse)?void 0:s.wikitext)?void 0:a["*"])||"").match(/\|\s*image\s*=\s*(.+)/i);return o?o[1].split("\n")[0].split("|")[0].trim():null},b=async e=>{var s;e.toLowerCase().startsWith("file:")||(e="File:"+e);const a={...u,action:"query",titles:e,prop:"imageinfo",iiprop:"url"},i=l(a),r=await g(i),t=null==(s=null==r?void 0:r.query)?void 0:s.pages;if(t){const e=t[Object.keys(t)[0]];if(e&&e.imageinfo&&e.imageinfo[0]){const s=e.imageinfo[0].url;return{panel:s.split("/revision")[0],modal:s.split("revision")[0]}}}return null},v=async e=>{const s=await w(e);return s?await b(s):null},h=(e,s=0)=>{const a={...u,action:"cargoquery",tables:"Regions",fields:["Regions.Coordinates","Regions.Galaxy","Regions.Quadrant","Regions.Civilized","_pageName=Region"].join(","),where:`Civilized='${e}'`,order_by:"Region ASC",offset:s};return l(a)},D=e=>e.cargoquery.map((({title:e})=>({Coordinates:e.Coordinates||"Desconocido",Galaxy:e.Galaxy||"Desconocido",Quadrant:e.Quadrant||"Desconocido",Civilized:e.Civilized||"Desconocido",Region:e.Region||"Desconocido"}))),N=async(e,s=0)=>{const a=h(e,s),i=await g(a);if(null==i||!i.cargoquery)throw new Error("Invalid API response structure");return D(i)},R=async e=>{var s,a;const i={...u,action:"parse",page:e,prop:"wikitext"},r=l(i),t=await g(r),o=((null==(a=null==(s=null==t?void 0:t.parse)?void 0:s.wikitext)?void 0:a["*"])||"").match(/\|\s*image\s*=\s*(.+)/i);return o?o[1].split("\n")[0].split("|")[0].trim():null},P=async e=>{var s;e.toLowerCase().startsWith("file:")||(e="File:"+e);const a={...u,action:"query",titles:e,prop:"imageinfo",iiprop:"url"},i=l(a),r=await g(i),t=null==(s=null==r?void 0:r.query)?void 0:s.pages;if(t){const e=t[Object.keys(t)[0]];if(e&&e.imageinfo&&e.imageinfo[0]){const s=e.imageinfo[0].url;return{panel:s.split("/revision")[0],modal:s.split("revision")[0]}}}return null},j=async e=>{const s=await R(e);return s?await P(s):null},S=async(e,s,a)=>{try{const i={...u,action:"cargoquery",tables:s,fields:[a].join(","),where:`Civilized='Royal Space Society' AND Region='${e}'`,limit:500},r=l(i),t=await g(r);return null!=t&&t.cargoquery&&Array.isArray(t.cargoquery)?t.cargoquery.length:null}catch(s){return console.error(`Error fetching category stats for ${e}:`,s),null}},O=async e=>{const s={"Star systems":{CrossPlatform:0},Bases:{CrossPlatform:0},Planets:{CrossPlatform:0},Fauna:{CrossPlatform:0},Starships:{CrossPlatform:0},"Multi-Tools":{CrossPlatform:0}},a={"Star systems":{tableClass:"Systems",tableFields:"Region"},Bases:{tableClass:"Bases",tableFields:"Name"},Planets:{tableClass:"Planets",tableFields:"Civilized"},Fauna:{tableClass:"Creatures",tableFields:"Name"},Starships:{tableClass:"Starships",tableFields:"Coordinates"},"Multi-Tools":{tableClass:"Multitools",tableFields:"Civilized"}};for(const[i,{tableClass:r,tableFields:t}]of Object.entries(a)){const a=await S(e,r,t);null!==a&&(s[i]={CrossPlatform:a})}return Object.keys(s).length>0?s:null};export{v as a,N as b,j as c,q as f,O as g};
