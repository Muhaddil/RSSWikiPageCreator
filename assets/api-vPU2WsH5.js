"use strict";const y="https://nomanssky.fandom.com/api.php",c=s=>{const e=new URLSearchParams;return Object.entries(s).forEach(([a,i])=>{e.append(a,i.toString())}),`${y}?${e.toString()}`},u={format:"json",origin:"*"},m=(s,e,a)=>{const i={...u,action:"cargoquery",tables:"Bases",fields:["Name","CensusPlayer","CensusReddit","CensusDiscord","CensusFriend","System","Platform","Mode","CensusArrival","CensusRenewal","Builderlink"].join(","),where:`CensusShow IS NOT NULL AND Civilized='${s}'${a?` AND CensusRenewal HOLDS ${a}`:""}`,order_by:"CensusRenewal DESC",group_by:"CensusPlayer",limit:500,offset:e};return c(i)},d=async s=>{try{const e=await fetch(s);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const a=await e.text(),i=f(a);return JSON.parse(i)}catch(e){throw console.error("API call failed:",e),e}},f=s=>s.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#039;/g,"'").replace(/&amp;/g,"&"),w=s=>s.cargoquery.map(({title:e})=>({Name:e.Name,_pageName:e._pageName||e.Name,CensusPlayer:e.CensusPlayer||"Desconocido",System:e.System||"Desconocido",Platform:e.Platform||"Desconocida",Mode:e.Mode||"Desconocido",CensusArrival:e.CensusArrival||"Desconocido",CensusRenewal:e.CensusRenewal||"Desconocido",Builderlink:e.Builderlink,CensusReddit:e.CensusReddit,CensusDiscord:e.CensusDiscord,CensusFriend:e.CensusFriend,CensusVerified:e.CensusVerified})),v=async(s,e,a)=>{const i=m(s,e,a),r=await d(i);if(!(r!=null&&r.cargoquery))throw new Error("Invalid API response structure");return w(r)},b=async s=>{var e,a;const i={...u,action:"parse",page:s,prop:"wikitext"},r=c(i),t=await d(r),l=((a=(e=t?.parse)==null?void 0:e.wikitext)==null?void 0:a["*"])||"",o=/\|\s*image\s*=\s*(.+)/i,n=l.match(o);return n?n[1].split(`
`)[0].split("|")[0].trim():null},h=async s=>{var e;s.toLowerCase().startsWith("file:")||(s="File:"+s);const a={...u,action:"query",titles:s,prop:"imageinfo",iiprop:"url"},i=c(a),r=await d(i),t=(e=r?.query)==null?void 0:e.pages;if(t){const l=Object.keys(t)[0],o=t[l];if(o&&o.imageinfo&&o.imageinfo[0]){const n=o.imageinfo[0].url,p=n.split("/revision")[0],C=n.split("revision")[0];return{panel:p,modal:C}}}return null},P=async s=>{const e=await b(s);return e?await h(e):null},R=(s,e=0)=>{const a={...u,action:"cargoquery",tables:"Regions",fields:["Regions.Coordinates","Regions.Galaxy","Regions.Quadrant","Regions.Civilized","_pageName=Region"].join(","),where:`Civilized='${s}'`,order_by:"Region ASC",offset:e};return c(a)},S=s=>s.cargoquery.map(({title:e})=>({Coordinates:e.Coordinates||"Desconocido",Galaxy:e.Galaxy||"Desconocido",Quadrant:e.Quadrant||"Desconocido",Civilized:e.Civilized||"Desconocido",Region:e.Region||"Desconocido"})),D=async(s,e=0)=>{const a=R(s,e),i=await d(a);if(!(i!=null&&i.cargoquery))throw new Error("Invalid API response structure");return S(i)},q=async s=>{var e,a;const i={...u,action:"parse",page:s,prop:"wikitext"},r=c(i),t=await d(r),l=((a=(e=t?.parse)==null?void 0:e.wikitext)==null?void 0:a["*"])||"",o=/\|\s*image\s*=\s*(.+)/i,n=l.match(o);return n?n[1].split(`
`)[0].split("|")[0].trim():null},g=async s=>{var e;s.toLowerCase().startsWith("file:")||(s="File:"+s);const a={...u,action:"query",titles:s,prop:"imageinfo",iiprop:"url"},i=c(a),r=await d(i),t=(e=r?.query)==null?void 0:e.pages;if(t){const l=Object.keys(t)[0],o=t[l];if(o&&o.imageinfo&&o.imageinfo[0]){const n=o.imageinfo[0].url,p=n.split("/revision")[0],C=n.split("revision")[0];return{panel:p,modal:C}}}return null},N=async s=>{const e=await q(s);return e?await g(e):null},F=async(s,e,a)=>{try{const i={...u,action:"cargoquery",tables:e,fields:[a].join(","),where:`Civilized='Royal Space Society' AND Region='${s}'`,limit:500},r=c(i),t=await d(r);return t!=null&&t.cargoquery&&Array.isArray(t.cargoquery)?t.cargoquery.length:null}catch(i){return console.error(`Error fetching category stats for ${s}:`,i),null}},k=async s=>{const e={"Star systems":{CrossPlatform:0},Bases:{CrossPlatform:0},Planets:{CrossPlatform:0},Fauna:{CrossPlatform:0},Starships:{CrossPlatform:0},"Multi-Tools":{CrossPlatform:0}},a={"Star systems":{tableClass:"Systems",tableFields:"Region"},Bases:{tableClass:"Bases",tableFields:"Name"},Planets:{tableClass:"Planets",tableFields:"Civilized"},Fauna:{tableClass:"Creatures",tableFields:"Name"},Starships:{tableClass:"Starships",tableFields:"Coordinates"},"Multi-Tools":{tableClass:"Multitools",tableFields:"Civilized"}};for(const[i,{tableClass:r,tableFields:t}]of Object.entries(a)){const l=await F(s,r,t);l!==null&&(e[i]={CrossPlatform:l})}return Object.keys(e).length>0?e:null};export{P as a,D as b,N as c,k as d,v as f,g};
