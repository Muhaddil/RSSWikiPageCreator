const m="https://nomanssky.fandom.com/api.php",l=s=>{const e=new URLSearchParams;return Object.entries(s).forEach(([r,t])=>{e.append(r,t.toString())}),`${m}?${e.toString()}`},u={format:"json",origin:"*"},y=(s,e,r)=>{const t={...u,action:"cargoquery",tables:"Bases",fields:["Name","CensusPlayer","CensusReddit","CensusDiscord","CensusFriend","System","Platform","Mode","CensusArrival","CensusRenewal","Builderlink"].join(","),where:`CensusShow IS NOT NULL AND Civilized='${s}'${r?` AND CensusRenewal HOLDS ${r}`:""}`,order_by:"CensusRenewal DESC",group_by:"CensusPlayer",limit:500,offset:e};return l(t)},g=async s=>{try{const e=await fetch(s);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const r=await e.text(),t=C(r);return JSON.parse(t)}catch(e){throw console.error("API call failed:",e),e}},C=s=>s.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#039;/g,"'").replace(/&amp;/g,"&"),f=s=>s.cargoquery.map(({title:e})=>({Name:e.Name,_pageName:e._pageName||e.Name,CensusPlayer:e.CensusPlayer||"Desconocido",System:e.System||"Desconocido",Platform:e.Platform||"Desconocida",Mode:e.Mode||"Desconocido",CensusArrival:e.CensusArrival||"Desconocido",CensusRenewal:e.CensusRenewal||"Desconocido",Builderlink:e.Builderlink,CensusReddit:e.CensusReddit,CensusDiscord:e.CensusDiscord,CensusFriend:e.CensusFriend,CensusVerified:e.CensusVerified})),q=async(s,e,r)=>{const t=y(s,e,r),a=await g(t);if(!(a!=null&&a.cargoquery))throw new Error("Invalid API response structure");return f(a)},w=async s=>{var n,c;const e={...u,action:"parse",page:s,prop:"wikitext"},r=l(e),t=await g(r),a=((c=(n=t==null?void 0:t.parse)==null?void 0:n.wikitext)==null?void 0:c["*"])||"",o=/\|\s*image\s*=\s*(.+)/i,i=a.match(o);return i?i[1].split(`
`)[0].split("|")[0].trim():null},b=async s=>{var o;s.toLowerCase().startsWith("file:")||(s="File:"+s);const e={...u,action:"query",titles:s,prop:"imageinfo",iiprop:"url"},r=l(e),t=await g(r),a=(o=t==null?void 0:t.query)==null?void 0:o.pages;if(a){const i=Object.keys(a)[0],n=a[i];if(n&&n.imageinfo&&n.imageinfo[0]){const c=n.imageinfo[0].url,p=c.split("/revision")[0],d=c.split("revision")[0];return{panel:p,modal:d}}}return null},v=async s=>{const e=await w(s);return e?await b(e):null},h=(s,e=0)=>{const r={...u,action:"cargoquery",tables:"Regions",fields:["Regions.Coordinates","Regions.Galaxy","Regions.Quadrant","Regions.Civilized","_pageName=Region"].join(","),where:`Civilized='${s}'`,order_by:"Region ASC",offset:e};return l(r)},D=s=>s.cargoquery.map(({title:e})=>({Coordinates:e.Coordinates||"Desconocido",Galaxy:e.Galaxy||"Desconocido",Quadrant:e.Quadrant||"Desconocido",Civilized:e.Civilized||"Desconocido",Region:e.Region||"Desconocido"})),N=async(s,e=0)=>{const r=h(s,e),t=await g(r);if(!(t!=null&&t.cargoquery))throw new Error("Invalid API response structure");return D(t)},R=async s=>{var n,c;const e={...u,action:"parse",page:s,prop:"wikitext"},r=l(e),t=await g(r),a=((c=(n=t==null?void 0:t.parse)==null?void 0:n.wikitext)==null?void 0:c["*"])||"",o=/\|\s*image\s*=\s*(.+)/i,i=a.match(o);return i?i[1].split(`
`)[0].split("|")[0].trim():null},P=async s=>{var o;s.toLowerCase().startsWith("file:")||(s="File:"+s);const e={...u,action:"query",titles:s,prop:"imageinfo",iiprop:"url"},r=l(e),t=await g(r),a=(o=t==null?void 0:t.query)==null?void 0:o.pages;if(a){const i=Object.keys(a)[0],n=a[i];if(n&&n.imageinfo&&n.imageinfo[0]){const c=n.imageinfo[0].url,p=c.split("/revision")[0],d=c.split("revision")[0];return{panel:p,modal:d}}}return null},j=async s=>{const e=await R(s);return e?await P(e):null},S=async(s,e,r)=>{try{const t={...u,action:"cargoquery",tables:e,fields:[r].join(","),where:`Civilized='Royal Space Society' AND Region='${s}'`,limit:500},a=l(t),o=await g(a);return o!=null&&o.cargoquery&&Array.isArray(o.cargoquery)?o.cargoquery.length:null}catch(t){return console.error(`Error fetching category stats for ${s}:`,t),null}},O=async s=>{const e={"Star systems":{CrossPlatform:0},Bases:{CrossPlatform:0},Planets:{CrossPlatform:0},Fauna:{CrossPlatform:0},Starships:{CrossPlatform:0},"Multi-Tools":{CrossPlatform:0}},r={"Star systems":{tableClass:"Systems",tableFields:"Region"},Bases:{tableClass:"Bases",tableFields:"Name"},Planets:{tableClass:"Planets",tableFields:"Civilized"},Fauna:{tableClass:"Creatures",tableFields:"Name"},Starships:{tableClass:"Starships",tableFields:"Coordinates"},"Multi-Tools":{tableClass:"Multitools",tableFields:"Civilized"}};for(const[t,{tableClass:a,tableFields:o}]of Object.entries(r)){const i=await S(s,a,o);i!==null&&(e[t]={CrossPlatform:i})}return Object.keys(e).length>0?e:null};export{v as a,N as b,j as c,O as d,q as f,P as g};
