const m=/^\s*([^=|{}[\]]*)=/,h=/\|/m,a=/}}/m,r=/(\[\[|\{\{)/m;function R(e){const i=RegExp(/^(\{\{|\[\[)(.*)/).exec(e);if(!i)return 0;let n,x=i[1].length;e=e.slice(x),"{{"===i[1]?n=/\}\}/m:"[["===i[1]&&(n=/\]\]/m);let c=RegExp(r).exec(e),l=RegExp(n??"").exec(e);for(;c&&(!l||c.index<l.index);){const i=R(e=e.slice(c.index));x+=c.index+i,e=e.slice(i),c=RegExp(r).exec(e),l=RegExp(n??"").exec(e)}return x+=((null==l?void 0:l.index)??0)+((null==l?void 0:l[0].length)??0),x}function w(e,i){const n=[],x=new RegExp("(\\{\\{\\s*"+i+"\\s*(\\||\\}\\}))","im");let c=RegExp(x).exec(e);for(;c;){const i={};let l=1;if((e=e.slice(c.index+c[1].length)).startsWith("\n")&&(e=e.slice(1)),"}}"===c[2]){n.push(i),c=RegExp(x).exec(e);continue}let s=null,t="",d=!1;for(;!d;){const x=RegExp(m).exec(e),c=RegExp(r).exec(e),g=RegExp(h).exec(e),o=RegExp(a).exec(e);if(""===t&&x)s=x[1].trim(),e=e.slice(x[0].length);else if(g&&(!c||g.index<c.index)&&(!o||g.index<o.index))t+=e.slice(0,g.index),e=e.slice(g.index+1),(""!==t||s)&&(i[s??l]=t.trim()),l++,s=null,t="";else if(c&&(!o||c.index<o.index)){const i=R(e.slice(c.index));t+=e.slice(0,c.index+i),e=e.slice(c.index+i)}else o&&(t+=e.slice(0,o.index),e=e.slice(o.index+2),(""!==t||s)&&(i[s??l]=t.trim()),n.push(i)),d=!0}c=RegExp(x).exec(e)}return n}export{w};
