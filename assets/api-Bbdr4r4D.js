"use strict";const C="https://nomanssky.fandom.com/api.php",n=s=>{const e=new URLSearchParams;return Object.entries(s).forEach(([t,a])=>{e.append(t,a.toString())}),`${C}?${e.toString()}`},l={format:"json",origin:"*"},g=(s,e,t)=>{const a={...l,action:"cargoquery",tables:"Bases",fields:["Name","CensusPlayer","CensusReddit","CensusDiscord","CensusFriend","System","Platform","Mode","CensusArrival","CensusRenewal","Builderlink"].join(","),where:`CensusShow IS NOT NULL AND Civilized='${s}'${t?` AND CensusRenewal HOLDS ${t}`:""}`,order_by:"CensusRenewal DESC",group_by:"CensusPlayer",limit:500,offset:e};return n(a)},c=async s=>{try{const e=await fetch(s);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.text(),a=y(t);return JSON.parse(a)}catch(e){throw console.error("API call failed:",e),e}},y=s=>s.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#039;/g,"'").replace(/&amp;/g,"&"),m=s=>s.cargoquery.map(({title:e})=>({Name:e.Name,_pageName:e._pageName||e.Name,CensusPlayer:e.CensusPlayer||"Desconocido",System:e.System||"Desconocido",Platform:e.Platform||"Desconocida",Mode:e.Mode||"Desconocido",CensusArrival:e.CensusArrival||"Desconocido",CensusRenewal:e.CensusRenewal||"Desconocido",Builderlink:e.Builderlink,CensusReddit:e.CensusReddit,CensusDiscord:e.CensusDiscord,CensusFriend:e.CensusFriend,CensusVerified:e.CensusVerified})),f=async(s,e,t)=>{const a=g(s,e,t),i=await c(a);if(!i?.cargoquery)throw new Error("Invalid API response structure");return m(i)},w=async s=>{const e={...l,action:"parse",page:s,prop:"wikitext"},t=n(e),a=(await c(t))?.parse?.wikitext?.["*"]||"",i=/\|\s*image\s*=\s*(.+)/i,r=a.match(i);return r?r[1].split(`
`)[0].split("|")[0].trim():null},b=async s=>{s.toLowerCase().startsWith("file:")||(s="File:"+s);const e={...l,action:"query",titles:s,prop:"imageinfo",iiprop:"url"},t=n(e),a=(await c(t))?.query?.pages;if(a){const i=Object.keys(a)[0],r=a[i];if(r&&r.imageinfo&&r.imageinfo[0]){const o=r.imageinfo[0].url,u=o.split("/revision")[0],d=o.split("revision")[0];return{panel:u,modal:d}}}return null},h=async s=>{const e=await w(s);return e?await b(e):null},P=(s,e=0)=>{const t={...l,action:"cargoquery",tables:"Regions",fields:["Regions.Coordinates","Regions.Galaxy","Regions.Quadrant","Regions.Civilized","_pageName=Region"].join(","),where:`Civilized='${s}'`,order_by:"Region ASC",offset:e};return n(t)},R=s=>s.cargoquery.map(({title:e})=>({Coordinates:e.Coordinates||"Desconocido",Galaxy:e.Galaxy||"Desconocido",Quadrant:e.Quadrant||"Desconocido",Civilized:e.Civilized||"Desconocido",Region:e.Region||"Desconocido"})),S=async(s,e=0)=>{const t=P(s,e),a=await c(t);if(!a?.cargoquery)throw new Error("Invalid API response structure");return R(a)},D=async s=>{const e={...l,action:"parse",page:s,prop:"wikitext"},t=n(e),a=(await c(t))?.parse?.wikitext?.["*"]||"",i=/\|\s*image\s*=\s*(.+)/i,r=a.match(i);return r?r[1].split(`
`)[0].split("|")[0].trim():null},p=async s=>{s.toLowerCase().startsWith("file:")||(s="File:"+s);const e={...l,action:"query",titles:s,prop:"imageinfo",iiprop:"url"},t=n(e),a=(await c(t))?.query?.pages;if(a){const i=Object.keys(a)[0],r=a[i];if(r&&r.imageinfo&&r.imageinfo[0]){const o=r.imageinfo[0].url,u=o.split("/revision")[0],d=o.split("revision")[0];return{panel:u,modal:d}}}return null},v=async s=>{const e=await D(s);return e?await p(e):null},q=async(s,e,t)=>{try{const a={...l,action:"cargoquery",tables:e,fields:[t].join(","),where:`Civilized='Royal Space Society' AND Region='${s}'`,limit:500},i=n(a),r=await c(i);return r?.cargoquery&&Array.isArray(r.cargoquery)?r.cargoquery.length:null}catch(a){return console.error(`Error fetching category stats for ${s}:`,a),null}},N=async s=>{const e={"Star systems":{CrossPlatform:0},Bases:{CrossPlatform:0},Planets:{CrossPlatform:0},Fauna:{CrossPlatform:0},Starships:{CrossPlatform:0},"Multi-Tools":{CrossPlatform:0}},t={"Star systems":{tableClass:"Systems",tableFields:"Region"},Bases:{tableClass:"Bases",tableFields:"Name"},Planets:{tableClass:"Planets",tableFields:"Civilized"},Fauna:{tableClass:"Creatures",tableFields:"Name"},Starships:{tableClass:"Starships",tableFields:"Coordinates"},"Multi-Tools":{tableClass:"Multitools",tableFields:"Civilized"}};for(const[a,{tableClass:i,tableFields:r}]of Object.entries(t)){const o=await q(s,i,r);o!==null&&(e[a]={CrossPlatform:o})}return Object.keys(e).length>0?e:null};export{h as a,S as b,v as c,N as d,f,p as g};
