const p="https://nomanssky.fandom.com/api.php",c=s=>{const e=new URLSearchParams;return Object.entries(s).forEach(([a,t])=>{e.append(a,t.toString())}),`${p}?${e.toString()}`},l={format:"json",origin:"*"},m=(s,e,a)=>{const t={...l,action:"cargoquery",tables:"Bases",fields:["Name","CensusPlayer","CensusReddit","CensusDiscord","CensusFriend","System","Platform","Mode","CensusArrival","CensusRenewal","Builderlink"].join(","),where:`CensusShow IS NOT NULL AND Civilized='${s}'${a?` AND CensusRenewal HOLDS ${a}`:""}`,order_by:"CensusRenewal DESC",group_by:"CensusPlayer",limit:500,offset:e};return c(t)},u=async s=>{try{const e=await fetch(s);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const a=await e.text(),t=y(a);return JSON.parse(t)}catch(e){throw console.error("API call failed:",e),e}},y=s=>s.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#039;/g,"'").replace(/&amp;/g,"&"),C=s=>s.cargoquery.map(({title:e})=>({Name:e.Name,_pageName:e._pageName||e.Name,CensusPlayer:e.CensusPlayer||"Desconocido",System:e.System||"Desconocido",Platform:e.Platform||"Desconocida",Mode:e.Mode||"Desconocido",CensusArrival:e.CensusArrival||"Desconocido",CensusRenewal:e.CensusRenewal||"Desconocido",Builderlink:e.Builderlink,CensusReddit:e.CensusReddit,CensusDiscord:e.CensusDiscord,CensusFriend:e.CensusFriend,CensusVerified:e.CensusVerified})),S=async(s,e,a)=>{const t=m(s,e,a),r=await u(t);if(!r?.cargoquery)throw new Error("Invalid API response structure");return C(r)},f=async s=>{const e={...l,action:"parse",page:s,prop:"wikitext"},a=c(e),r=(await u(a))?.parse?.wikitext?.["*"]||"",n=/\|\s*image\s*=\s*(.+)/i,o=r.match(n);return o?o[1].split(`
`)[0].split("|")[0].trim():null},w=async s=>{s.toLowerCase().startsWith("file:")||(s="File:"+s);const e={...l,action:"query",titles:s,prop:"imageinfo",iiprop:"url"},a=c(e),r=(await u(a))?.query?.pages;if(r){const n=Object.keys(r)[0],o=r[n];if(o&&o.imageinfo&&o.imageinfo[0]){const i=o.imageinfo[0].url,d=i.split("/revision")[0],g=i.split("revision")[0];return{panel:d,modal:g}}}return null},q=async s=>{const e=await f(s);return e?await w(e):null},b=(s,e=0)=>{const a={...l,action:"cargoquery",tables:"Regions",fields:["Regions.Coordinates","Regions.Galaxy","Regions.Quadrant","Regions.Civilized","_pageName=Region"].join(","),where:`Civilized='${s}'`,order_by:"Region ASC",offset:e};return c(a)},h=s=>s.cargoquery.map(({title:e})=>({Coordinates:e.Coordinates||"Desconocido",Galaxy:e.Galaxy||"Desconocido",Quadrant:e.Quadrant||"Desconocido",Civilized:e.Civilized||"Desconocido",Region:e.Region||"Desconocido"})),v=async(s,e=0)=>{const a=b(s,e),t=await u(a);if(!t?.cargoquery)throw new Error("Invalid API response structure");return h(t)},D=async s=>{const e={...l,action:"parse",page:s,prop:"wikitext"},a=c(e),r=(await u(a))?.parse?.wikitext?.["*"]||"",n=/\|\s*image\s*=\s*(.+)/i,o=r.match(n);return o?o[1].split(`
`)[0].split("|")[0].trim():null},R=async s=>{s.toLowerCase().startsWith("file:")||(s="File:"+s);const e={...l,action:"query",titles:s,prop:"imageinfo",iiprop:"url"},a=c(e),r=(await u(a))?.query?.pages;if(r){const n=Object.keys(r)[0],o=r[n];if(o&&o.imageinfo&&o.imageinfo[0]){const i=o.imageinfo[0].url,d=i.split("/revision")[0],g=i.split("revision")[0];return{panel:d,modal:g}}}return null},N=async s=>{const e=await D(s);return e?await R(e):null},P=async(s,e,a)=>{try{const t={...l,action:"cargoquery",tables:e,fields:[a].join(","),where:`Civilized='Royal Space Society' AND Region='${s}'`,limit:500},r=c(t),n=await u(r);return n?.cargoquery&&Array.isArray(n.cargoquery)?n.cargoquery.length:null}catch(t){return console.error(`Error fetching category stats for ${s}:`,t),null}},j=async s=>{const e={"Star systems":{CrossPlatform:0},Bases:{CrossPlatform:0},Planets:{CrossPlatform:0},Fauna:{CrossPlatform:0},Starships:{CrossPlatform:0},"Multi-Tools":{CrossPlatform:0}},a={"Star systems":{tableClass:"Systems",tableFields:"Region"},Bases:{tableClass:"Bases",tableFields:"Name"},Planets:{tableClass:"Planets",tableFields:"Civilized"},Fauna:{tableClass:"Creatures",tableFields:"Name"},Starships:{tableClass:"Starships",tableFields:"Coordinates"},"Multi-Tools":{tableClass:"Multitools",tableFields:"Civilized"}};for(const[t,{tableClass:r,tableFields:n}]of Object.entries(a)){const o=await P(s,r,n);o!==null&&(e[t]={CrossPlatform:o})}return Object.keys(e).length>0?e:null};export{q as a,v as b,N as c,j as d,S as f,R as g};
